[{"title":"Go从零实现Web框架Mygin教程 - 01.Mygin实现简单Http","path":"/2024/01/24/mygin-day01.html","content":"本篇是完全参考gin的功能，自己手动实现一个类似的功能，帮助自己理解和学习gin框架。 目的 简单介绍net&#x2F;http库以及http.Handler接口 实现简单路由请求的功能 标准库启动Web服务先看用标准库怎样启动一个web服务 123456789import &quot;net/http&quot;func helloHandler(w http.ResponseWriter, r *http.Request) &#123;\tw.Write([]byte(&quot;hello world&quot;))&#125;func main() &#123;\thttp.HandleFunc(&quot;/hello&quot;, helloHandler)\thttp.ListenAndServe(&quot;:8088&quot;, nil)&#125; 设置路由我设置了一个 &#x2F;hello 的简单路由，GET请求后返回 hello world。 12 ~ curl 127.0.0.1:8088/hellohello world为什么请求路由能够返回hello world，这就要从Golang的http包ListenAndServe.go中查看了。 ListenAndServe源码查看我已经将源码上的注释翻译成了中文 1234567891011// ListenAndServe监听TCP网络地址addr，然后调用//使用处理程序处理传入连接的请求。//被接受的连接被配置为使能TCP keepalive。////处理程序通常为nil，在这种情况下使用DefaultServeMux。//// ListenAndServe总是返回一个非nil错误。func ListenAndServe(addr string, handler Handler) error &#123;\tserver := &amp;Server&#123;Addr: addr, Handler: handler&#125;\treturn server.ListenAndServe()&#125; 实现Handler接口 http包中HandleFunc的第二个参数是什么意思？点进官方包去看。12345package httptype Handler interface &#123; ServeHTTP(w ResponseWriter, r *Request)&#125; 看到第二个参数是要实现 Handler 接口的方法，根据路由匹配交给实现对应的方法处理。 engine.go编写基于此改造封装mygin&#x2F;engine.go 12345678910111213141516171819202122232425262728293031package myginimport (\t&quot;net/http&quot;)type Engine struct &#123;&#125;//ServeHTTP 方法func (e *Engine) ServeHTTP(w http.ResponseWriter, r *http.Request) &#123;\tswitch r.URL.Path &#123;\tcase &quot;/&quot;: w.Write([]byte(&quot;success &quot;))\tcase &quot;/hello&quot;: w.Write([]byte(&quot;hello world！ &quot;))\tdefault: w.Write([]byte(&quot;404 NOT FOUND&quot; + r.URL.Path + &quot; &quot;))\t&#125;&#125;func Default() *Engine &#123;\treturn &amp;Engine&#123;&#125;&#125;func (e *Engine) Run(addr string) &#123;\terr := http.ListenAndServe(addr, e)\tif err != nil &#123; return\t&#125;&#125; 可以看到我编写了一个engine.go文件，包含了ServeHTTP方法，也就是engine实现了http包中 Handler 接口。http.ListenAndServe第二个参数把engine对象传过去，在http在处理时，就会去调用engine中的ServeHTTP方法。 main.go中调用12345678package mainimport &quot;gophp/mygin&quot;func main() &#123;\tengine := mygin.Default()\tengine.Run(&quot;:8088&quot;)&#125; 编写好上诉代码后，启动main方法 curl请求1234 ~ curl 127.0.0.1:8088/hellohello world！ ~ curl 127.0.0.1:8088success 看到上诉结果，代表已经实现了最核心的第一步，可以看出在Golang中，不管什么web框架，所有的请求都是在此基础上运行的。赶快动手去试试吧。","tags":["Golang","Web"],"categories":["Go从零实现Web框架Mygin教程"]},{"path":"/wiki/index.html","content":"写在前面欢迎来到我的笔记小站！ 终生学习的重要性不言而喻，培根说过：To live is to learn, to learn is not to live。意思是【活着就要学习，学习不是为了活着】。 所以在有生之年，我将把我想学的知识系统地记录在这里，也希望能对你有帮助。"}]